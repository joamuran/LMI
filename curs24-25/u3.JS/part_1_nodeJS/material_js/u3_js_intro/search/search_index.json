{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inici","text":"<p>Benvinguts a la unitat sobre el llenguatge Javascript. En aquesta unitat farem una introducci\u00f3 a les caracter\u00edstiques b\u00e0siques del llenguatge, i veurem com incorporar-lo als nostres documents web per afegir-los dinamisme.</p> <p>Comen\u00e7arem la unitat treballant principalment amb NodeJS, un entorn d'execuci\u00f3 (runtime) basat en el motor de Javascript V8 de Google Chrome, que ens permetr\u00e0 familiaritzar-nos amb el llenguatge. Posteriorment, ja veurem com incorporar el codi Javascript als nostres documents web i introduirem el concepte del DOM (Model d'Objectes del Document), que ens permetr\u00e0 representar tota l'estructura d'un document web i manipular-la.</p>"},{"location":"#resultats-daprenentatge","title":"Resultats d'aprenentatge","text":"<ul> <li>RA3. Accedeix i manipula documents web utilitzant llenguatges de script de client.</li> </ul>"},{"location":"#criteris-davaluacio","title":"Criteris d'avaluaci\u00f3","text":"<ul> <li>RA3.a) S'han identificat i classificat els llenguatges de script de client relacionats amb la web i les seues diferents versions i est\u00e0ndards.</li> <li>RA3.b) S'ha identificat la sintaxi b\u00e0sica dels llenguatges de script de client.</li> <li>RA3.c) S'han utilitzat m\u00e8todes per a la selecci\u00f3 i acc\u00e9s dels diferents elements d'un document web.</li> <li>RA3.d) S'han creat i modificat elements de documents web.</li> <li>RA3.e) S'han eliminat elements de documents web.</li> <li>RA3.f) S'han realitzat modificacions sobre els estils d'un document web.</li> </ul> <p>Comencem!</p>"},{"location":"1.intro/","title":"1. Introducci\u00f3 a Javascript","text":""},{"location":"1.intro/#introduccio","title":"Introducci\u00f3","text":"<p>Node.js \u00e9s un entorn d'execuci\u00f3 (runtime) constru\u00eft sobre el motor JavaScript V8 de Google Chrome, que ens permet utilitzar aquest llenguatge per desenvolupar qualsevol tipus d'aplicaci\u00f3, constituint-se com un entorn full-stack (frontend i backend) complet. A m\u00e9s, com que \u00e9s un llenguatge lligat inicialment al m\u00f3n web, tenim la possibilitat de crear aplicacions d'escriptori o m\u00f2bils emprant tecnologies com HTML5 i CSS.</p> <p>A l'espai Octoverse (https://octoverse.github.com/) creat per Github, es presenta un informe anual de les tend\u00e8ncies en desenvolupament de programari lliure, basat en milions de projectes allotjats en aquest portal. En aquest informe, podem veure com JavaScript \u00e9s, de lluny, el llenguatge m\u00e9s utilitzat en projectes de programari lliure, seguit de Python en segon lloc i Java en tercer.</p> <p></p> <p>Documentaci\u00f3 oficial</p> <p>Lloc web oficial amb la documentaci\u00f3 de Node.js: https://nodejs.org/en/docs/</p>"},{"location":"1.intro/#evolucio-de-javascript","title":"Evoluci\u00f3 de JavaScript","text":"<p>La primera versi\u00f3 de JavaScript va ser dissenyada el 1995 per Netscape, amb la intenci\u00f3 inicial de donar als navegadors la capacitat de validar formularis sense enviar les dades al servidor, la qual cosa era avantatj\u00f3s en un moment en qu\u00e8 la velocitat de les comunicacions era molt limitada. Aquesta primera versi\u00f3, inicialment anomenada LiveScript, va passar a dir-se JavaScript per raons de m\u00e0rqueting (Java estava de moda en aquella \u00e8poca).</p> <p>L'any 1997 es va estandarditzar el llenguatge, creant-se la norma ECMA-262 (European Computer Manufacturers Association), coneguda com a ECMAScript. La ISO va adoptar l'ECMA-262 donant lloc a l'est\u00e0ndard ISO/IEC-16262.</p> <p>Des d'aleshores, el llenguatge ha anat evolucionant i guanyant capacitat, sent la versi\u00f3 ES6 (ECMAScript 2015) la que va introduir m\u00e9s canvis, amb la introducci\u00f3 d'\u00e0mbits per a les variables, string templates, funcions fletxa, desestructuraci\u00f3, classes i promeses.</p>"},{"location":"1.intro/#caracteristiques-principals-de-nodejs","title":"Caracter\u00edstiques principals de Node.js","text":"<p>Entre les caracter\u00edstiques de Node.js, podem destacar:</p> <ul> <li>Ofereix un paradigma de programaci\u00f3 basada en esdeveniments, a trav\u00e9s d'una API as\u00edncrona que no bloqueja el programa principal mentre espera una resposta, sin\u00f3 que continua l'execuci\u00f3 principal fins a rebre la resposta.</li> <li>L'execuci\u00f3 del codi \u00e9s molt r\u00e0pida.</li> <li>Es basa en un model monofilament molt escalable: Nom\u00e9s hi ha un fil d'execuci\u00f3 atenent peticions, per\u00f2 gr\u00e0cies a l'API as\u00edncrona i orientada a esdeveniments, es poden atendre m\u00faltiples peticions amb aquest fil, consumint molts menys recursos que un sistema multithread.</li> <li>Com que l'execuci\u00f3 no es realitza dins del navegador, s'elimina la necessitat de desenvolupar codi compatible amb cada navegador.</li> </ul>"},{"location":"1.intro/#on-podem-trobar-nodejs","title":"On podem trobar Node.js?","text":"<p>Node.js est\u00e0 en m\u00e9s llocs dels que ens podem imaginar. Veiem una llista d'aplicacions on s'utilitza Node.js, tant des del costat del servidor com en aplicacions d'escriptori i m\u00f2bils. A continuaci\u00f3 alguns exemples:</p> <ul> <li>Entorns de servidor (backend): Netflix, PayPal, LinkedIn, eBay, NASA, Mozilla, Uber, Yahoo, Groupon (https://www.hackaboss.com/blog/5-mejores-ejemplos-de-aplicaciones-node-js-para-empresas).</li> <li>Aplicacions d'escriptori:<ul> <li>Aplicacions d'escriptori basades en Electron (https://electronjs.org/apps): Skype, WhatsApp, Slack, Atom, Visual Studio Code, Github Desktop.</li> <li>Aplicacions basades en nwjs (https://github.com/nwjs/nw.js/wiki/list-of-apps-and-companies-using-nw.js): Haroopad, Reditr, TweetDeck, Kindle Cloud Reader.</li> </ul> </li> <li>Aplicacions m\u00f2bils amb Ionic/Capacitor: MarketWatch, Sanvello, Calla (https://mdevelopers.com/blog/14-best-ionic-apps-of-2022).</li> </ul>"},{"location":"1.intro/#primers-passos-amb-nodejs","title":"Primers passos amb Node.js","text":""},{"location":"1.intro/#installacio","title":"Instal\u00b7laci\u00f3","text":"<p>En Ubuntu, Node.js ja ve instal\u00b7lat de s\u00e8rie en la versi\u00f3 10.19.0~dfsg-3ubuntu1 (Ubuntu 20.04 LTS) a data de desembre de 2022.</p> <p>Si desitgem la darrera versi\u00f3, podem descarregar el paquet des del propi lloc web de Node.js, on es troben les darreres versions oficials (actualment, les versions LTS i Current). La difer\u00e8ncia entre les dues \u00e9s que la LTS es considera estable i t\u00e9 suport a llarg termini, mentre que la Current incorpora les \u00faltimes novetats, a canvi de perdre un poc d'estabilitat (podr\u00edem dir que \u00e9s una beta de la propera versi\u00f3 LTS).</p> <p>Si optem per descarregar aquesta versi\u00f3, veurem que no est\u00e0 en format de paquet, sin\u00f3 que \u00e9s un fitxer comprimit, per la qual cosa caldr\u00e0 descomprimir-lo i copiar cada cosa al seu lloc. D'altra banda, al repositori NodeSource de Github hi ha uns scripts per facilitar-nos la instal\u00b7laci\u00f3 des del gestor de paquets del sistema: https://nodejs.org/es/download/package-manager.</p> <p>Per al treball que farem, ens ser\u00e0 suficient amb la versi\u00f3 que porta Ubuntu, aix\u00ed no tindrem problemes amb depend\u00e8ncies en distribuir les nostres aplicacions.</p> <p>Aquest paquet ofereix tant el <code>node</code> (o el seu \u00e0lies <code>nodejs</code>) com el gestor de paquets de Node.js, anomenat <code>npm</code> (Node Package Manager).</p>"},{"location":"1.intro/#hola-node","title":"Hola Node","text":"<p>Node.js es pot llan\u00e7ar des de la terminal amb l'ordre <code>node</code> o el seu \u00e0lies <code>nodejs</code>.</p> <p>Per comprovar la versi\u00f3 de Node que tenim, farem servir <code>node -v</code> o <code>node --version</code>:</p> <pre><code>$ node -v\nv18.19.1\n</code></pre> <p>Node.js admet dues formes de treball: mitjan\u00e7ant la consola interactiva i l'execuci\u00f3 directa de scripts.</p>"},{"location":"1.intro/#la-consola-interactiva","title":"La consola interactiva","text":"<p>Node.js disposa d'una consola interactiva a la qual podem accedir amb <code>node</code> i llan\u00e7ar directament ordres:</p> <pre><code>$ node\n&gt; console.log(\"Hola Node\");\nHola Node\nundefined\n</code></pre> <p>Quan llancem Node, el prompt del sistema canvia al s\u00edmbol <code>&gt;</code>, indicant que estem dins de la consola de Node. Si alguna vegada hem treballat amb la consola web del navegador, el funcionament \u00e9s exactament el mateix.</p> <p>Si ens fixem, hem escrit nom\u00e9s una instrucci\u00f3 <code>console.log</code>, que seria l'equivalent en Java a <code>System.out.println</code>. Podem veure com no ha fet falta definir cap classe principal ni cap m\u00e8tode <code>main</code>. JavaScript, tot i que suporta la programaci\u00f3 orientada a objectes, no obliga a que tot estiga dins d'una classe.</p> <p>Per eixir del mode interactiu, utilitzarem la combinaci\u00f3 de tecles <code>Ctrl+D</code>.</p>"},{"location":"1.intro/#execucio-dscripts","title":"Execuci\u00f3 d'scripts","text":"<p>La manera habitual de treballar amb Node.js ser\u00e0 llan\u00e7ant l'ordre <code>node</code> sobre un script. Veiem un senzill exemple. Tenim el seg\u00fcent script, denominat hola.js.</p> <pre><code>if (process.argv.length == 3)\n console.log(\"Hola \" + process.argv[2]);\nelse\n console.log(\"Hola Node.js\");\n</code></pre> <p>Per executar-lo, utilitzarem <code>node</code> juntament amb el nom del fitxer:</p> <pre><code>$ node hola.js Jose\nHola Jose\n$ node hola.js \nHola Node.js\n</code></pre> <p>Es tracta d'un Hola M\u00f3n personalitzat que, segons els par\u00e0metres que li proporcionem, escriur\u00e0 una cosa o una altra. Tamb\u00e9 podem observar, com ja s'ha comentat abans, que no cal incloure el codi dins de cap classe o funci\u00f3 especial. A m\u00e9s, veiem que podem accedir als par\u00e0metres passats per la l\u00ednia d'ordres a trav\u00e9s de l'objecte <code>process.argv</code>.</p>"},{"location":"2.generalitats/","title":"2. Generalitats del llenguatge JS","text":""},{"location":"2.generalitats/#presentacio","title":"Presentaci\u00f3","text":"<p>Com hem comentat, Node.js es basa en el motor de JavaScript V8 de Google Chrome, aix\u00ed que comen\u00e7arem amb una introducci\u00f3 a les particularitats del llenguatge JavaScript per a entendre millor el seu \u00fas en Node.js. JavaScript, des dels seus inicis fins avui, s'ha transformat en un llenguatge polivalent i amb funcionalitats que van m\u00e9s enll\u00e0 del navegador.</p> <p>JavaScript \u00e9s un llenguatge interpretat, de tipat din\u00e0mic i basat en prototips, caracter\u00edstiques que han donat lloc a una evoluci\u00f3 cont\u00ednua per adaptar-se a les necessitats del desenvolupament modern.</p>"},{"location":"2.generalitats/#generalitats-del-llenguatge","title":"Generalitats del llenguatge","text":"<p>Vegem algunes generalitats del llenguatge:</p> <ul> <li>Un programa o script en JavaScript est\u00e0 compost per sent\u00e8ncies, que poden acabar o no en <code>;</code>. Tot i que no \u00e9s obligatori, \u00e9s recomanable utilitzar-lo.</li> <li>Els espais en blanc sobrants i les noves l\u00ednies no es tenen en compte, per la qual cosa admet qualsevol tipus de tabulaci\u00f3.</li> <li>Els blocs de codi es defineixen seguint l'estil de llenguatges com C o Java, amb claus <code>{...}</code>.</li> <li>\u00c9s un llenguatge case sensitive, per tant, distingeix entre maj\u00fascules i min\u00fascules.</li> <li>Els comentaris tamb\u00e9 segueixen una sintaxi similar a C o Java:</li> <li><code>//</code> Dos barres per a comentaris d\u2019una sola l\u00ednia.</li> <li><code>/*</code> Barra i asterisc per a comentaris de m\u00e9s d'una l\u00ednia <code>*/</code>.</li> <li>Paraules reservades: S\u00f3n aquelles utilitzades per construir sent\u00e8ncies, i que no es poden emprar lliurement. Algunes d'aquestes s\u00f3n: <code>break</code>, <code>case</code>, <code>catch</code>, <code>class</code>, <code>continue</code>, <code>default</code>, <code>delete</code>, <code>do</code>, <code>else</code>, <code>finally</code>, <code>for</code>, <code>function</code>, <code>if</code>, <code>in</code>, <code>instanceof</code>, <code>new</code>, <code>return</code>, <code>switch</code>, <code>this</code>, <code>throw</code>, <code>try</code>, <code>typeof</code>, <code>var</code>, <code>void</code>, <code>while</code>, <code>with</code>.</li> <li>Tot i que JavaScript suporta programaci\u00f3 orientada a objectes, no estem obligats a utilitzar-la. Per tant, no \u00e9s necessari definir un m\u00e8tode <code>main</code> dins d'una classe, sin\u00f3 que directament l'execuci\u00f3 comen\u00e7a amb la primera l\u00ednia de codi executable.</li> </ul>"},{"location":"3.Elements/","title":"3. Elements del llenguatge","text":""},{"location":"3.Elements/#variables","title":"Variables","text":"<p>No \u00e9s necessari declarar variables en JavaScript, encara que \u00e9s altament recomanable. Per a declarar una variable fem:</p> <pre><code>let variable = valor;\n</code></pre> <p>Tamb\u00e9 es pot utilitzar <code>var</code> en lloc de <code>let</code>, per\u00f2 des de la versi\u00f3 ES2015, la recomanaci\u00f3 \u00e9s utilitzar <code>let</code>.</p>"},{"location":"3.Elements/#el-mode-estrict","title":"El mode estrict","text":"<p>JavaScript permet treballar en mode strict, que obliga a declarar les variables abans d'utilitzar-les.</p> <p>Per exemple, el seg\u00fcent script (saluda.js):</p> <pre><code>nom = \"Jose\";\nconsole.log(\"Hola \" + nom);\n</code></pre> <p>Funcionaria correctament:</p> <pre><code>$ node saluda.js\nHola Jose\n</code></pre> <p>Per\u00f2 si habilitem el mode estricte:</p> <pre><code>'use strict';\n\nnom = \"Jose\";\nconsole.log(\"Hola \" + nom);\n</code></pre> <p>Mostraria el seg\u00fcent error:</p> <pre><code>/tmp/prova1.js:3\nnom = \"Jose\"\n ^\n\nReferenceError: nom is not defined\n    at Object.&lt;anonymous&gt; (/tmp/saluda.js:3:4)\n    ...\n</code></pre> <p>El treballar en mode estricte ens obliga a definir variables, la qual cosa facilita detectar errors en escriure el nom d'aquestes.</p>"},{"location":"3.Elements/#el-nom-de-les-variables","title":"El nom de les variables","text":"<ul> <li>El nom de les variables pot contindre qualsevol car\u00e0cter alfanum\u00e8ric, a m\u00e9s del s\u00edmbol <code>$</code> i <code>_</code>.</li> <li>Poden comen\u00e7ar per qualsevol car\u00e0cter, <code>$</code> o <code>_</code>, per\u00f2 no per un n\u00famero.</li> <li>El nom de les variables sol indicar-se en format CamelCase (la primera lletra de cada paraula en maj\u00fascula i la resta en min\u00fascula).</li> </ul>"},{"location":"3.Elements/#tipus-de-variables-i-assignacio-dinamica","title":"Tipus de variables i assignaci\u00f3 din\u00e0mica","text":"<p>Una variable tamb\u00e9 pot ser inicialitzada en la declaraci\u00f3 amb qualsevol valor o amb el resultat d'una expressi\u00f3.</p> <pre><code>let variable = [valor | expressi\u00f3];\n</code></pre> <p>Una variable en JavaScript emmagatzema dades d'un tipus concret en un moment donat. Mitjan\u00e7ant l'assignaci\u00f3 din\u00e0mica de tipus, el tipus de dada que emmagatzema la variable pot canviar en temps d'execuci\u00f3. \u00c9s a dir, el tipus d'una variable es defineix de manera din\u00e0mica en el moment de la seua assignaci\u00f3, no de la declaraci\u00f3.</p> <p>Les variables poden ser:</p> <ul> <li>Num\u00e8riques (number): Emmagatzema valors enters o decimals (amb el car\u00e0cter <code>.</code> per a separar la part entera de la decimal).</li> <li>Text (string): Emmagatzema una llista de car\u00e0cters entre cometes, ja siguen simples o dobles. Si el text cont\u00e9 cometes, cal anar amb compte de no utilitzar internament les cometes utilitzades per a definir la cadena de text o b\u00e9 escapant aquestes:</li> </ul> <pre><code>var text = \"Aquesta frase utilitza 'cometes simples'\"\nvar text = 'Aquesta frase utilitza \"cometes dobles escapades\"'\n</code></pre> <p>En les cadenes de text tamb\u00e9 podem incloure:   * Salt de l\u00ednia: <code>\\n</code>   * Tabulador: <code>\\t</code>   * Barra inclinada: <code>\\\\</code>   * Cometes escapades: <code>\\\"</code> o <code>\\'</code></p> <p>Conversi\u00f3 de tipus</p> <p>La conversi\u00f3 de tipus es realitza de manera autom\u00e0tica. En cas d'ambig\u00fcitat, s'utilitzen prioritats.</p> <p>Exemple: <code>'10'+3</code> suma un string i un number. En aquest cas, t\u00e9 prioritat la cadena de car\u00e0cters, per la qual cosa el number 3 es converteix a string '3'. En canvi, quan es tracta del <code>+</code> unari, nom\u00e9s s'aplica a nombres, per la qual cosa <code>+ '20'</code> representa el n\u00famero 20.</p> <p>Exemples addicionals:</p> <pre><code>13 + 7 =&gt; 20\n\"13\" + \"7\" =&gt; \"137\"\n\"13\" + 7 =&gt; \"137\"\n+\"13\" + 7 =&gt; 20\n</code></pre> <ul> <li>Tipus l\u00f2gic: Pot contindre els valors true i false.</li> </ul> <pre><code>let itemSeleccionat = false;\nlet mostrar = true;\n</code></pre> <ul> <li>Valors null i undefined: Quan una variable no s'ha definit, el tipus \u00e9s undefined. En canvi, quan volem referir-nos al valor nul, utilitzem null, sense cometes.</li> </ul> <p>Typeof</p> <p>Per a saber el tipus de dada que cont\u00e9 una variable en un moment donat, podem utilitzar l'operador <code>typeof</code>:</p> <pre><code>&gt; typeof(10) // 'number'\n&gt; typeof(\"hola\") // 'string'\n&gt; typeof(true) // 'boolean'\n&gt; typeof(a) // 'undefined'\n&gt; typeof(null) // 'object'\n&gt; typeof({\"nom\": \"Jose\"}) // 'object'\n</code></pre>"},{"location":"3.Elements/#vectors-i-json","title":"Vectors i JSON","text":"<p>Els vectors s\u00f3n col\u00b7leccions de valors/elements, que poden ser del mateix tipus o de tipus diferents (a difer\u00e8ncia d'altres llenguatges, on els tipus han de ser homog\u00e8nics).</p> <p>Per a definir un vector, utilitzem els car\u00e0cters <code>[ ]</code> al principi i al final, i les comes (,) per a separar elements.</p> <pre><code>let nom_vector = [valor1, valor2, ..., valorN];\n</code></pre> <p>Exemples:</p> <pre><code>let dies_setmana = [\"dilluns\", \"dimarts\", \"dimecres\", \"dijous\", \"divendres\", \"dissabte\", \"diumenge\"];\nlet ex_vector = [\"cadena1\", num1, \"cadena2\", [\"cadena1_vector1\"]];\n</code></pre> <p>Per a accedir als elements, indiquem la posici\u00f3 en el vector (la posici\u00f3 inicial \u00e9s 0):</p> <ul> <li>Consulta: <code>var avui = dies_setmana[1];</code></li> <li>Assignaci\u00f3: <code>ex_vector[1] = \"cadena3\";</code></li> </ul> <p>Un vector buit es pot definir inicialitzant-lo a buit o creant un nou objecte de la classe Array:</p> <pre><code>ex_vector2 = [];\nex_vector3 = new Array();\n</code></pre> <p>Els elements JSON (JavaScript Object Notation) s\u00f3n una forma compacta d'emmagatzemar i transmetre informaci\u00f3 mitjan\u00e7ant parells clau-valor.</p> <p>Els tipus de dades que podem representar en JSON s\u00f3n:</p> <ul> <li>Nombres, tant enters com decimals.</li> <li>Cadenes, expressades entre cometes i amb la possibilitat d'incloure seq\u00fc\u00e8ncies d'escapada.</li> <li>Booleans, per a representar els valors true i false.</li> <li>Null, per a representar el valor nul.</li> <li>Array, per a llistes de zero o m\u00e9s valors de qualsevol tipus, entre claud\u00e0tors i separats per comes.</li> <li>Objectes, com a col\u00b7leccions de parells <code>&lt;clau&gt;:&lt;valor&gt;</code>, separats per comes i entre claus.</li> </ul> <p>Exemple de notaci\u00f3 JSON:</p> <pre><code>{\n \"curs\": [\n   {\n     \"nom\": \"Acc\u00e9s a Dades\",\n     \"hores\": 6,\n     \"qualificaci\u00f3\": 8.45\n   },\n   {\n     \"nom\": \"Programaci\u00f3 de serveis i processos\",\n     \"hores\": 3,\n     \"qualificaci\u00f3\": 9.0\n   }\n ]\n}\n</code></pre> <p>JavaScript suporta la manipulaci\u00f3 d'elements JSON de manera nativa, de manera que no necessitem cap llibreria per a utilitzar aquest format.</p>"},{"location":"3.Elements/#declaracio-de-constants","title":"Declaraci\u00f3 de constants","text":"<p>Quan no desitgem que canvie el valor d'una variable o volem definir un valor global immutable, es recomana utilitzar la paraula reservada <code>const</code> en lloc de <code>let</code>. Per a les constants globals, es recomana usar maj\u00fascules.</p> <pre><code>const PI = 3.1416;\n</code></pre>"},{"location":"3.Elements/#operadors","title":"Operadors","text":"<p>Les variables es combinen entre si, formant expressions mitjan\u00e7ant els operadors. Aquestes expressions es poden avaluar, donant lloc a un nou valor, que pot utilitzar-se per a prendre decisions en un script, o per assignar-lo a noves variables.</p> <p>Els operadors poden ser d'assignaci\u00f3, aritm\u00e8tics, l\u00f2gics o relacionals.</p>"},{"location":"3.Elements/#operador-dassignacio","title":"Operador d'assignaci\u00f3 (=)","text":"<p>S'utilitza per assignar a una variable un valor o expressi\u00f3.</p> <pre><code>let variable1 = expressi\u00f3;\n</code></pre>"},{"location":"3.Elements/#operadors-aritmetics","title":"Operadors aritm\u00e8tics","text":"<p>Els operadors aritm\u00e8tics treballen amb valors de tipus num\u00e8ric per a obtindre altres valors num\u00e8rics. A m\u00e9s dels habituals de suma (+), resta (-), multiplicaci\u00f3 (), divisi\u00f3 (/) i rest de la divisi\u00f3 (%)*, hi ha els seg\u00fcents operadors:</p> <ul> <li>Operadors d'increment (++) i decrement (--): incrementen o decrementen el valor d'una variable, amb diferent significat segons si es col\u00b7loquen davant o darrere de la variable.</li> </ul> <pre><code>let a = 2;\nlet b = 2;\nlet c = ++a + b;\n// c = 5\n// a = 3\n</code></pre> <p>No \u00e9s el mateix que:</p> <pre><code>let a2 = 2;\nlet b2 = 2;\nlet c2 = a2++ + b2;\n// c2 = 4\n// a2 = 3\n</code></pre> <ul> <li>Suma/resta combinada (+= i -=): igual que en C i Java, podem utilitzar expressions com <code>a += 3</code> per simplificar l'expressi\u00f3 <code>a = a + 3</code>.</li> </ul>"},{"location":"3.Elements/#operadors-logics","title":"Operadors l\u00f2gics","text":"<p>S'apliquen sobre valors l\u00f2gics i retornen un valor tamb\u00e9 l\u00f2gic.</p> <ul> <li>Negaci\u00f3: <code>!</code></li> </ul> <pre><code>let a = true;\n!a;\n// false\n</code></pre> <p>Quan s'aplica a valors no l\u00f2gics, el significat \u00e9s el seg\u00fcent: el valor num\u00e8ric 0 i la cadena de text buida es converteixen al valor l\u00f2gic false, mentre que un nombre diferent de 0 i una cadena no buida es consideren true.</p> <ul> <li>Operador and (&amp;&amp;): el resultat \u00e9s cert si els dos operands ho s\u00f3n.</li> <li>Operador or (||): el resultat \u00e9s cert si un dels dos operands ho \u00e9s.</li> </ul>"},{"location":"3.Elements/#operadors-relacionals","title":"Operadors relacionals","text":"<p>Comparen valors de qualsevol tipus i ens proporcionen un valor de tipus l\u00f2gic.</p> Operador Sem\u00e0ntica <code>&gt;</code> Major que <code>&lt;</code> Menor que <code>&gt;=</code> Major o igual <code>&lt;=</code> Menor o igual <code>==</code> Igual que (nom\u00e9s valor)  <code>5 == \"5\" ==&gt; true</code> <code>===</code> Igual que, en valor i tipus  <code>5 === \"5\" ==&gt; false</code> <code>!=</code> Distint de <code>!==</code> Distint, o de tipus diferent <p>Quan es treballa amb cadenes, els operadors relacionals comparen, lletra a lletra, els car\u00e0cters ASCII de dues cadenes, d'esquerra a dreta.</p>"},{"location":"3.Elements/#altres-operadors","title":"Altres operadors","text":"<p>A m\u00e9s dels operadors tradicionals, JavaScript proporciona altres operadors:</p> <ul> <li>Operador condicional ternari: permet assignar un valor a una variable basant-se en certa condici\u00f3:</li> </ul> <pre><code>nomVariable = (condici\u00f3) ? valor1 : valor2;\n</code></pre> <p>Per exemple:</p> <pre><code>let major_edad = (edat &lt; 18) ? \"Menor d'edat\" : \"Major d'edat\";\n</code></pre> <ul> <li>Operador <code>typeof</code>: com ja hem comentat abans, aquest operador obt\u00e9 el tipus de valor d'una variable.</li> </ul> <p>Si necessites m\u00e9s traducci\u00f3 o alguna altra revisi\u00f3, ac\u00ed estic!</p>"},{"location":"4.Funcions/","title":"4. Funcions","text":""},{"location":"4.Funcions/#funcions","title":"Funcions","text":"<p>La declaraci\u00f3 d'una funci\u00f3 en JavaScript es fa amb la paraula reservada <code>function</code>. A difer\u00e8ncia de Java, les funcions poden declarar-se fora d'un objecte.</p> <pre><code>function nom_funci\u00f3(llista_arguments) {\n // Cos de la funci\u00f3\n}\n</code></pre> <p>El nom de la funci\u00f3 s'utilitza per a fer refer\u00e8ncia a ella des de qualsevol part del codi. Si volem que la funci\u00f3 ens retorne algun valor i assignar aquest a una variable, farem \u00fas de la paraula reservada <code>return</code>. L'ordre dels arguments \u00e9s important (pas de par\u00e0metres posicional). A m\u00e9s, el nombre de variables utilitzades en invocar la funci\u00f3 no ha de coincidir amb el nombre d'arguments en la declaraci\u00f3.</p> <p>Exemple:</p> <pre><code>function suma(numero1, numero2) {\n resultat = numero1 + numero2;\n return resultat;\n}\n\ns = suma(a, b);\n</code></pre> <p>Cal recordar que una funci\u00f3 nom\u00e9s retorna un valor; si necessitem retornar informaci\u00f3 variada, podem utilitzar JSON.</p> <p>Exemple:</p> <pre><code>function calculaPreu(preu) {\n    preu_iva = (preu * 1.21).toFixed(2); // Arrodonim a dos decimals\n    preu_iva_reduit = (preu * 1.1).toFixed(2);\n    return {\"preu_amb_iva\": preu_iva, \"preu_iva_reduit\": preu_iva_reduit};\n}\n\nlet preus = calculaPreu(50);\nconsole.log(preus);\n// Object { preu_amb_iva: \"60.50\", preu_iva_reduit: \"55.00\" }\n</code></pre>"},{"location":"4.Funcions/#ambit-de-les-variables-scope","title":"\u00c0mbit de les variables (scope)","text":"<p>L'\u00e0mbit d'una variable \u00e9s la part del programa on est\u00e0 definida i on t\u00e9 sentit. L'\u00e0mbit pot ser:</p> <ul> <li>global, visible des de tot el script, o</li> <li>local, visible nom\u00e9s en la funci\u00f3 on es troba declarada (amb <code>var</code> o <code>let</code>).</li> </ul> <p>Per a entendre b\u00e9 l'\u00e0mbit de les variables, cal tindre en compte alguns aspectes:</p> <ul> <li>JavaScript \u00e9s un llenguatge amb \u00e0mbit global com a \u00e0mbit per defecte, on tot es passa tamb\u00e9 per defecte per refer\u00e8ncia: quan declarem una variable fora d'una funci\u00f3, aquesta \u00e9s global i es passa per refer\u00e8ncia als \u00e0mbits descendents (per tant, qualsevol modificaci\u00f3 feta a la variable en qualsevol \u00e0mbit tindr\u00e0 efecte sobre ella).</li> <li>Quan declarem una variable amb <code>var</code> dins d'una funci\u00f3, es crea una variable local amb visibilitat restringida a eixa funci\u00f3.</li> <li>Quan definim una variable amb <code>let</code> o una constant amb <code>const</code>, el seu \u00e0mbit es redueix als blocs on est\u00e0 definida.</li> </ul> <p>Vegem-ho amb un exemple. El seg\u00fcent codi defineix algunes variables amb <code>let</code> i <code>var</code> en diferents \u00e0mbits:</p> <pre><code>var var1 = 1;\nvar var2 = 2;\n\nfunction fun() {\n    var1 = 3;\n    var var2 = 4;\n    var var3 = 5;\n    let var4 = 6;\n    {\n        var var5 = 7;\n        let var6 = 8;\n    }\n\n    console.log(\"\u00c0mbit: Dins la funci\u00f3:\");\n    if (typeof(var1) != \"undefined\") console.log(\"var1=\" + var1);\n    if (typeof(var2) != \"undefined\") console.log(\"var2=\" + var2);\n    if (typeof(var3) != \"undefined\") console.log(\"var3=\" + var3);\n    if (typeof(var4) != \"undefined\") console.log(\"var4=\" + var4);\n    if (typeof(var5) != \"undefined\") console.log(\"var5=\" + var5);\n    if (typeof(var6) != \"undefined\") console.log(\"var6=\" + var6);\n}\n\nfun();\n\nconsole.log(\"\u00c0mbit: Fora de la funci\u00f3:\");\nif (typeof(var1) != \"undefined\") console.log(\"var1=\" + var1);\nif (typeof(var2) != \"undefined\") console.log(\"var2=\" + var2);\nif (typeof(var3) != \"undefined\") console.log(\"var3=\" + var3);\nif (typeof(var4) != \"undefined\") console.log(\"var4=\" + var4);\nif (typeof(var5) != \"undefined\") console.log(\"var5=\" + var5);\nif (typeof(var6) != \"undefined\") console.log(\"var6=\" + var6);\n</code></pre> <p>Parem-nos un moment per pensar la sortida que tindr\u00e0 aquest script i, una vegada ho h\u00e0gem pensat, vegem el resultat per a contrastar:</p> <pre><code>$ nodejs ambits.js\n\u00c0mbit: Dins la funci\u00f3:\nvar1 = 3\nvar2 = 4\nvar3 = 5\nvar4 = 6\nvar5 = 7\nvar6 no est\u00e0 definida\n\u00c0mbit: Fora de la funci\u00f3:\nvar1 = 3\nvar2 = 2\nvar3 no est\u00e0 definida\nvar4 no est\u00e0 definida\nvar5 no est\u00e0 definida\nvar6 no est\u00e0 definida\n</code></pre> <p>Algunes observacions:</p> <ul> <li>Dins de la funci\u00f3, tenim acc\u00e9s a totes les variables definides, tant fora com dins, excepte la variable <code>var6</code>, que s'ha definit dins d'un bloc de codi amb la paraula reservada <code>let</code>.</li> <li>Dins de la funci\u00f3, <code>var1</code> i <code>var2</code> han modificat el seu valor, per\u00f2 fora de la funci\u00f3, la modificaci\u00f3 nom\u00e9s s'ha mantingut per a <code>var1</code>, mentre que <code>var2</code> no s'ha modificat. Aix\u00f2 es deu al fet que la modificaci\u00f3 realitzada sobre <code>var1</code> s'ha fet sobre la <code>refer\u00e8ncia</code> a la variable global, mentre que <code>var2</code> s'ha definit de nou amb <code>var</code> dins de la funci\u00f3, sent, per tant, una refer\u00e8ncia diferent de la <code>var2</code> definida globalment.</li> <li>Finalment, observem que totes les variables definides dins de la funci\u00f3, independentment de si s'han fet amb <code>var</code> o <code>let</code>, no tenen visibilitat fora de la funci\u00f3.</li> </ul> <p>Note</p> <p>La recomanaci\u00f3 \u00e9s utilitzar sempre la paraula reservada <code>let</code> i definir les variables sempre de forma local als \u00e0mbits on es necessiten. Quan cal passar variables a una funci\u00f3, ho farem sempre amb el pas d'arguments.</p>"},{"location":"5.PrgEstructurada/","title":"5. Programaci\u00f3 estructurada en Javascript","text":""},{"location":"5.PrgEstructurada/#estructures-condicionals","title":"Estructures condicionals","text":""},{"location":"5.PrgEstructurada/#if","title":"if","text":"<p>\u00c9s la condici\u00f3 m\u00e9s senzilla:</p> <pre><code>if (condici\u00f3) {\n // bloc de codi a executar si la condici\u00f3 es compleix\n}\n</code></pre> <p>Exemple 1</p> <pre><code>if (hora &lt; 12) {\n salut = \"Bon dia\";\n}\n</code></pre>"},{"location":"5.PrgEstructurada/#if-else","title":"if / else","text":"<pre><code>if (condici\u00f3) {\n // bloc de codi a executar si la condici\u00f3 es compleix\n} else {\n // bloc de codi a executar si la condici\u00f3 no es compleix\n}\n</code></pre> <p>Exemple</p> <pre><code>if (hora &lt; 12) {\n    salut = \"Bon dia\";\n} else {\n    salut = \"Bona vesprada\";\n}\n</code></pre>"},{"location":"5.PrgEstructurada/#else-if","title":"else if","text":"<p>Quan hi ha diverses condicions alternatives, podem utilitzar la estructura <code>else if</code>.</p> <pre><code>if (condici\u00f31) {\n    // bloc de codi a executar si la condici\u00f3 1 es compleix\n} else if (condici\u00f32) {\n    // bloc de codi a executar si la condici\u00f3 2 es compleix\n} else {\n // bloc de codi a executar si cap de les dues condicions es compleix\n}\n</code></pre> <p>Exemple</p> <pre><code>if (hora &lt; 12) {\n salut = \"Bon dia\";\n} else if (hora &lt; 21) {\n salut = \"Bona vesprada\";\n} else {\n salut = \"Bona nit\";\n}\n</code></pre>"},{"location":"5.PrgEstructurada/#switch","title":"Switch","text":"<p>S'utilitza quan volem realitzar diferents accions segons m\u00faltiples condicions d'una expressi\u00f3. Segons aquesta s'avalua, s'executar\u00e0 un (o m\u00e9s, cal anar amb compte amb el <code>break</code>!) entre diversos blocs.</p> <pre><code>switch(expressi\u00f3) {\n case n1:\n    // Bloc de codi a executar si expressi\u00f3 s'avalua a n1\n break;\n case n2:\n    // Bloc de codi a executar si expressi\u00f3 s'avalua a n2\n break;\n default:\n    // Bloc de codi a executar si l'expressi\u00f3 no coincideix\n}\n</code></pre> <p>Exemple: Usant la funci\u00f3 <code>Date().getDay()</code> que retorna el dia de la setmana:</p> <pre><code>switch (new Date().getDay()) {\n    case 0:\n        dia = \"Diumenge\";\n        break;\n    case 1:\n        dia = \"Dilluns\";\n        break;\n    case 2:\n        dia = \"Dimarts\";\n        break;\n    case 3:\n        dia = \"Dimecres\";\n        break;\n    case 4:\n        dia = \"Dijous\";\n        break;\n    case 5:\n        dia = \"Divendres\";\n        break;\n    case 6:\n        dia = \"Dissabte\";\n        break;\n    default:\n       console.log(\"dia erroni\");\n}\n</code></pre> <p>El <code>break</code> indica que ja no cal seguir buscant m\u00e9s coincid\u00e8ncies. Aix\u00ed evitem comparacions innecess\u00e0ries i errors. Tamb\u00e9 podem agrupar diversos casos (sense el <code>break</code> pel mig) quan hi ha codi com\u00fa.</p> <p>Exemple:</p> <pre><code>switch (new Date().getDay()) {\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n        dia = \"dia laboral\";\n        break;\n    case 0: // Diumenge\n    case 6: // Dissabte\n        dia = \"cap de setmana\";\n        break;\n    default:\n       console.log(\"dia erroni\");\n}\n</code></pre>"},{"location":"5.PrgEstructurada/#estructures-repetitives","title":"Estructures repetitives","text":""},{"location":"5.PrgEstructurada/#bucle-for","title":"Bucle for","text":"<p>S'utilitza generalment quan sabem per endavant quantes repeticions necessitem:</p> <pre><code>for (inicialitzaci\u00f3; condici\u00f3_de_repetici\u00f3 ; increment ) {\n    // Codi a executar\n}\n</code></pre> <p>Exemple:</p> <pre><code>for (i = 0; i &lt; 10; i++) {\n    console.log(\"\u00cdndex: \" + i); // Sumem un string i un enter!\n}\n</code></pre> <p>Sint\u00e0cticament, la inicialitzaci\u00f3, condici\u00f3 de repetici\u00f3 i l'increment no s\u00f3n necess\u00e0ries, i el bucle anterior podria expressar-se aix\u00ed:</p> <pre><code>var i = 0;\nfor (;;) {\n console.log(i++);\n if (i &gt; 10) break; // El break trenca el flux del bucle\n}\n</code></pre> <p>Tamb\u00e9 podem inicialitzar diversos valors:</p> <p>Exemple: Per a mostrar els elements d'un vector:</p> <pre><code>vector = [\"pera\", \"poma\", \"pl\u00e0tan\"];\nfor (i = 0, len = vector.length, text = \"\"; i &lt; len; i++) {\n    console.log(vector[i]);\n}\n</code></pre>"},{"location":"5.PrgEstructurada/#bucle-forin-forof","title":"Bucle for/in - for/of","text":"<p>S'utilitza per a rec\u00f3rrer els elements d'un objecte:</p> <pre><code>for (item in object) {\n    ...\n}\n</code></pre> <p>Exemple:</p> <pre><code>let peli = {t\u00edtol: \"Han Solo: Una hist\u00f2ria de Star Wars\", director: \"Ron Howard\"};\n\nfor (index in peli) {\n    console.log(index + \":\" + peli[index]);\n}\n</code></pre> <p>Tamb\u00e9 podem indexar els elements d'un vector:</p> <pre><code>v = [1, 2, 3, 76, 4, 2, 5];\nfor (i in v) {\n    console.log(v[i]);\n}\n</code></pre> <p>Compte!</p> <p>Un error habitual (per influ\u00e8ncia d'altres llenguatges de script) \u00e9s confondre l'\u00edndex amb el valor de l'element:</p> <pre><code>for (e in v) {\nconsole.log(e); // Quan el que volem \u00e9s accedir al contingut!\n}\n</code></pre> <p>Per a accedir directament als elements, JavaScript ofereix l'operador <code>of</code>. L'\u00fanic requeriment \u00e9s que l'objecte siga iterable.</p> <p>Per exemple, el seg\u00fcent codi que imprimeix els elements del vector mitjan\u00e7ant <code>for..in</code>:</p> <pre><code>for (i in v) {console.log(v[i]);}\n</code></pre> <p>Es pot expressar m\u00e9s senzillament mitjan\u00e7ant <code>for..of</code> amb:</p> <pre><code>for (i of v) {console.log(i);}\n</code></pre>"},{"location":"5.PrgEstructurada/#bucles-while-i-dowhile","title":"Bucles While i do/while","text":"<p>S\u00f3n equivalents al bucle <code>for</code>, per\u00f2 amb una sintaxi diferent, on cal fer tant la inicialitzaci\u00f3 com l'increment fora de la sintaxi de la instrucci\u00f3.</p> <p>While</p> <pre><code>inicialitzaci\u00f3;\nwhile (condici\u00f3) {\n    // accions;\n    // increment;\n};\n</code></pre> <p>Do - While</p> <pre><code>// [inicialitzaci\u00f3;]\ndo {\n    // accions;\n    // [increment];\n} while (condici\u00f3);\n</code></pre> <p>Exemples:</p> <pre><code>let i = 1;\nwhile (i &lt; 10) {\n   console.log(i);\n   i++;\n}\n</code></pre> <pre><code>let i = 1;\ndo {\n    console.log(i);\n    i++;\n} while (i &lt; 10);\n</code></pre>"},{"location":"5.PrgEstructurada/#break-i-continue","title":"Break i continue","text":"<p>El <code>break</code>, com hem vist, serveix per a eixir d'un bucle (i tamb\u00e9 d'un <code>case</code>). La instrucci\u00f3 <code>continue</code>, per la seua part, serveix per a passar a la seg\u00fcent iteraci\u00f3 del bucle.</p> <p>Exemple</p> <pre><code>let i = 0;\nfor (;;) {\n    i++;\n    if (i % 2) continue; // A qu\u00e8 s'avalua i % 2?\n    console.log(i);\n    if (i &gt;= 10) break;\n}\n</code></pre>"},{"location":"6.POO/","title":"6. Programaci\u00f3 Orientada a Objectes en JS","text":"<p>En el paradigma d'orientaci\u00f3 a objectes, el programari es dissenya a trav\u00e9s d'objectes que cooperen, intercanviant missatges i responent a esdeveniments, a difer\u00e8ncia del punt de vista tradicional, que considera el programari com un conjunt de funcions.</p> <p>Vegem alguns conceptes:</p> <ul> <li>Classe: Defineix les caracter\u00edstiques de l'objecte.</li> <li>Objecte: Una inst\u00e0ncia de la classe.</li> <li>Propietat/Atribut: Una caracter\u00edstica (variable) de l'objecte.</li> <li>M\u00e8tode: Una capacitat (funci\u00f3) de l'objecte.</li> <li>Constructor: M\u00e8tode que s'invoca en crear l'objecte.</li> <li>Her\u00e8ncia: Capacitat d'una classe d'heretar caracter\u00edstiques d'una altra classe.</li> <li>Encapsulament: Les propietats i els m\u00e8todes dels objectes es troben organitzats de manera estructurada, evitant l'acc\u00e9s des de qualsevol forma diferent de les especificades.</li> <li>Polimorfisme: Mecanisme pel qual diferents classes poden implementar de forma diferent un mateix m\u00e8tode.</li> </ul>"},{"location":"6.POO/#orientacio-a-objectes-basada-en-prototips","title":"Orientaci\u00f3 a Objectes basada en prototips","text":"<p>Es tracta d'un estil de programaci\u00f3 orientada a objectes en qu\u00e8 aquests no es creen a trav\u00e9s de la instanciaci\u00f3 de classes, sin\u00f3 mitjan\u00e7ant la clonaci\u00f3 d'altres objectes que actuen com a prototips. Tamb\u00e9 es coneix com a programaci\u00f3 sense classes, orientada a prototip o basada en exemples.</p>"},{"location":"6.POO/#espais-de-noms","title":"Espais de noms","text":"<p>En aplicacions grans, solem utilitzar espais de noms per evitar conflictes entre diferents scripts i llibreries que les componen. Aquests actuen com a contenidors que permeten associar la funcionalitat i les propietats d'un objecte amb un nom \u00fanic i a\u00efllat de la resta (podria equiparar-se als <code>packages</code> de Java).</p> <p>En JavaScript no existeix una sintaxi nativa per a aquesta funcionalitat; s'utilitza un objecte per a aquest prop\u00f2sit. Per exemple:</p> <pre><code>var app = {}\napp.variable1 = 'variable1';\napp.variable2 = 'variable2';\napp.funcion = function () { .... };\n</code></pre> <p>La definici\u00f3 d'un objecte prototip en JavaScript no \u00e9s m\u00e9s que una funci\u00f3, que fa alhora de constructor:</p> <pre><code>function Objeto() { \n    // Constructor i inicialitzaci\u00f3 de valors\n}\n</code></pre> <p>I per crear un nou objecte basat en aquest prototip, fem servir <code>new</code>:</p> <pre><code>var obj = new Objeto();\n</code></pre> <p>Quan es defineix aix\u00ed un objecte, aquest t\u00e9 acc\u00e9s a una propietat especial, denominada prototip (<code>prototype</code>), que permet accedir a la classe en si.</p> <p>Per accedir a propietats dins d'una classe s'utilitza la paraula reservada <code>this</code>. Cal tenir cura amb aquesta, perqu\u00e8 quan tenim objectes o propietats aniuats, <code>this</code> sempre far\u00e0 refer\u00e8ncia a l'objecte del nivell on es troba.</p> <p>Per accedir des de fora de la classe a un atribut o m\u00e8tode, fem servir la notaci\u00f3 punt (<code>.</code>): <code>Objeto.propiedad / Objeto.m\u00e9todo</code>.</p> <p>Per exemple, per definir la propietat nom d'una classe persona, podem fer-ho en crear la inst\u00e0ncia:</p> <pre><code>function Persona(nom) {\n    this.nom = nom;\n}\n</code></pre> <p>I per instanciar dues persones noves:</p> <pre><code>let persona1 = new Persona(\"Paco\");\nlet persona2 = new Persona(\"Pepe\");\n\nconsole.log ('persona1 es ' + persona1.nom); // mostra \"persona1 es Paco\"\nconsole.log ('persona2 es ' + persona2.nom); // mostra \"persona2 es Pepe\"\n</code></pre> <p>Per incloure m\u00e8todes, definim funcions dins de la classe:</p> <pre><code>function Persona(nom) {\n this.nom = nom;\n this.saluda = function(){\n        alert('Hola, em dic ' + this.nom);\n    }\n}\n\nvar persona1 = new Persona('Paco');\npersona1.saluda();\n</code></pre> <p>Com veiem, els m\u00e8todes no s\u00f3n m\u00e9s que funcions que s'associen com una propietat a l'objecte, de manera que poden invocar-se fora del seu context.</p> <p>Exemple</p> <p>Vegem un exemple complet per a la definici\u00f3 de classes, i que ens servir\u00e0 per veure altres conceptes com el de l'her\u00e8ncia:</p> <pre><code>/* Exemple de definici\u00f3 de classes */\n\nfunction punt(x, y){\n    /* \n         Funci\u00f3 constructor de la classe punt\n       Rep dos par\u00e0metres amb els que inicialitza \n       els atributs x i y\n     */\n\n    this.x = x;  // Definim atributs amb la paraula \n    this.y = y;  // reservada \"this\"\n\n    this.get = function(){\n        // Els m\u00e8todes no s\u00f3n m\u00e9s que funcions\n        // Associades a la classe, i que definim\n        // amb this, igual que un atribut.\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    }\n}\n\nfunction figura(color, posici\u00f3){\n    /*\n        Classe figura, t\u00e9 com a atributs un color\n        i una posici\u00f3 (objecte de tipus punt)\n    */\n\n    this.color = color;   // Inicialitzem el color\n    this.position = posici\u00f3; // Inicialitzem la posici\u00f3\n\n    this.draw = function(){\n        /*\n              M\u00e8tode que mostra un missatge donant \n          informaci\u00f3 de la figura\n        */\n        console.log(\"Dibuixant figura en posici\u00f3 \" + this.position.get() +\n                      \" i color \" + this.color);\n    }\n}\n\nfunction rectangle(color, posici\u00f3, costat1, costat2){\n\n    /*\n    Classe rectangle, que \u00e9s una especialitzaci\u00f3 de \n        la classe figura. De figura hereta:\n        - l'atribut posici\u00f3 \n        - l'atribut color\n    A m\u00e9s:\n        - Inclou dos nous atributs: costat1 i costat2\n        - Redefineix el m\u00e8tode draw\n        - Defineix un nou m\u00e8tode area\n    */\n\n    this.costat1 = costat1;\n    this.costat2 = costat2;\n    /*\n    Per heretar propietats de figura, \n    fem \u00fas de \"call\", passant this com a \n    primer par\u00e0metre, i els valors amb qu\u00e8\n    volem invocar al constructor de la\n    superclasse\n    */\n\n    figura.call(this, color, posici\u00f3);\n\n    this.draw = function(){\n        console.log(\"Dibuixant Rectangle de \" +\n                 this.costat1 + \"x\" + this.costat2 +\n                 \" en posici\u00f3 \" + this.position.get() +\n                 \" i color \" + this.color);     \n        };\n\n    this.area = function(){\n        return this.costat1 * this.costat2;\n        }\n    }\n\n\nfunction cercle(color, posici\u00f3, radi){\n    /*\n    Classe cercle, hereta de figura: posici\u00f3 i color\n    Afig l'atribut radi\n    I redefineix el m\u00e8tode draw i defineix area\n    */\n\n    this.radi = radi;\n    // Apply tamb\u00e9 es pot utilitzar per heretar de la superclasse\n    // La difer\u00e8ncia \u00e9s que requereix el pas de par\u00e0metres a trav\u00e9s\n    // d'un vector:\n    figura.apply(this, [color, posici\u00f3]);\n\n    this.draw = function(){\n        console.log(\"Dibuixant Cercle de radi \" + this.radi +\n                       \" en posici\u00f3 \" + this.position.get() +\n                       \" i color \" + this.color);\n        };\n\n    this.area = function(){\n        return 2 * this.radi * Math.PI;\n        }\n    }\n\np1 = new punt(10,20);\np2 = new punt(10,30);\np3 = new punt(30,20);\n\nf1 = new figura(\"roig\", p1);\nf2 = new rectangle(\"verd\", p2, 40, 20);\nf3 = new cercle(\"blau\", p3, 50);\nf1.draw();\nf2.draw();\nf3.draw();\n</code></pre> <p>Exemple 2</p> <p>La forma anterior de definir els objectes prototips pot resultar confusa quan es tracta d'objectes que requeriran moltes funcions. Una pr\u00e0ctica habitual \u00e9s utilitzar l'element <code>prototype</code> per accedir al prototip d'una funci\u00f3 i modificar-lo. Vegem-ho m\u00e9s clar amb el mateix exemple expressat d'una altra manera:</p> <pre><code>/* Exemple de definici\u00f3 de classes */\n\nfunction punt(x, y){\n    /* \n    Classe(Objecte) punt, amb els atributs x i y.\n        */\n    this.x = x;\n    this.y = y;\n}\n\npunt.prototype.get = function(){\n    /*\n    Accedim al prototipus de l'objecte a trav\u00e9s de prototype\n    I creem una nova propietat \"get\" que \u00e9s una funci\u00f3\n    */  \n    return \"(\" + this.x + \",\" + this.y + \")\";\n}\n\nfunction figura(color, posici\u00f3){\n    this.color = color;\n    this.position = posici\u00f3;\n}\n\nfigura.prototype.draw = function draw(){\n     // Podem especificar tamb\u00e9 el nom de la funci\u00f3 despr\u00e9s del function\n    console.log(\"Dibuixant figura en posici\u00f3 \" + this.position.get() +\n                 \" i color \" + this.color);\n}\n\nfunction rectangle(color, posici\u00f3\n\n, costat1, costat2){\n    this.costat1 = costat1;\n    this.costat2 = costat2;\n    figura.call(this, color, posici\u00f3);\n}\n\nrectangle.prototype.draw = function(){\n        console.log(\"Dibuixant Rectangle de \" + this.costat1 +\n                        \"x\" + this.costat2 + \" en posici\u00f3 \" +\n                      this.position.get() + \" i color \" + this.color);      \n        };\n\nrectangle.prototype.area = function(){\n    return this.costat1 * this.costat2;\n}\n\nfunction cercle(color, posici\u00f3, radi){\n    this.radi = radi;\n    figura.apply(this, [color, posici\u00f3]);\n}\n\ncercle.prototype.draw = function(){\n    console.log(\"Dibuixant Cercle de radi \" + this.radi +\n                \" en posici\u00f3 \" + this.position.get() +\n                \" i color \" + this.color);      \n        };\n\ncercle.prototype.area = function(){\n    return 2 * this.radi * Math.PI;\n}\n\np1 = new punt(10,20);\np2 = new punt(10,30);\np3 = new punt(30,20);\n\nf1 = new figura(\"roig\", p1);\nf2 = new rectangle(\"verd\", p2, 40, 20);\nf3 = new cercle(\"blau\", p3, 50);\nf1.draw();\nf2.draw();\nf3.draw();\n</code></pre>"},{"location":"6.POO/#orientacio-a-objectes-a-partir-des6","title":"Orientaci\u00f3 a Objectes a partir d\u2019ES6","text":"<p>A partir de la versi\u00f3 EcmaScript 6, JavaScript suporta una sintaxi per a la orientaci\u00f3 a objectes m\u00e9s pr\u00f2xima a la d'altres llenguatges. Cal remarcar que no \u00e9s una reformulaci\u00f3 del model d'objectes, sin\u00f3 que simplement proporciona definicions m\u00e9s clares i simples per al treball amb objectes.</p>"},{"location":"6.POO/#declaracio-de-classes","title":"Declaraci\u00f3 de classes","text":"<p>Igual que en altres llenguatges, es pot declarar utilitzant la paraula <code>class</code>:</p> <pre><code>class Classe {\n\n}\n\nlet objecte = new Classe;\n</code></pre> <p>Cal tenir en compte alguns detalls:</p> <ul> <li>La classe no necessita arguments per a la seua definici\u00f3, per la qual cosa pot no anar acompanyada dels par\u00e8ntesis (<code>new Classe</code> en lloc de <code>new Classe()</code>).</li> <li>Com que s'ha definit com a classe, el sistema no permetr\u00e0 que s'execute com una funci\u00f3 (a difer\u00e8ncia dels prototips), sin\u00f3 que es reservar\u00e0 com un constructor.</li> <li>El contingut de la classe s'executa en mode <code>\"strict\"</code> de manera autom\u00e0tica.</li> <li>Les declaracions de classe no segueixen les regles del <code>*hoisting*</code> (la declaraci\u00f3 pot ser posterior a l'\u00fas). Aix\u00f2 significa que les classes nom\u00e9s existeixen despr\u00e9s de ser declarades.</li> <li>Una classe es comporta impl\u00edcitament com una constant, per la qual cosa no es pot redeclarar m\u00e9s endavant en un mateix \u00e0mbit.</li> </ul> <p>Vegem la declaraci\u00f3 de classe de forma m\u00e9s ampliada:</p> <pre><code>class Classe {\n    constructor (arguments) {\n        // super (arguments); \n        // Declaraci\u00f3 d'atributs amb this\n    }\n\n    get getAtribut() {\n        // getter; compte que el nom no siga el\n        // mateix que l'atribut\n\n        return (this.atribut);\n    }\n    set setAtribut(valor) {\n        // setter; compte que el nom no siga el\n        // mateix que l'atribut\n        this.atribut = valor;\n    }\n\n    static staticMethod() {\n        // Aquest \u00e9s un m\u00e8tode est\u00e0tic,\n        // S'executar\u00e0 des de la classe, \n        // no des de les inst\u00e0ncies d'aquesta.\n    }\n\n    Metode() {\n        // M\u00e8tode p\u00fablic\n        // No existeixen per tant els privats o protegits\n    }\n}\n</code></pre>"},{"location":"6.POO/#herencia","title":"Her\u00e8ncia","text":"<p>L'her\u00e8ncia s'aconsegueix mitjan\u00e7ant la paraula clau <code>extends</code>:</p> <pre><code>class Subclasse extends Superclasse {\n    constructor(params = {}) {\n        // Invocaci\u00f3 al constructor de la classe pare\n        super(valors);\n    }\n\n    metode() {\n        // Invocaci\u00f3 a m\u00e8todes de la classe pare\n        super.metode();\n    }\n}\n</code></pre> <p>Com podem veure, amb la paraula reservada <code>super</code> podem accedir a les propietats i m\u00e8todes del pare. Si la utilitzem en forma de funci\u00f3 (<code>super(valors)</code>), invoquem al constructor de la classe pare, amb els valors per defecte que li passem. Per la seua banda, quan la utilitzem en forma d'objecte (<code>super.metode()</code>), el que fem \u00e9s invocar un m\u00e8tode de la classe pare.</p> <p>Alguns aspectes a destacar sobre l'her\u00e8ncia en JavaScript:</p> <ul> <li>El constructor d'una classe filla ha d'invocar necess\u00e0riament <code>super</code> abans d'utilitzar <code>this</code>.</li> <li>Els constructors de les subclasses han d'invocar <code>super</code> per inicialitzar la classe o b\u00e9 retornar un objecte que reemplace l'objecte no inicialitzat.</li> </ul> <p>Vegem finalment com quedaria l'exemple anterior amb aquesta nova sintaxi:</p> <pre><code>/* Exemple de definici\u00f3 de classes */\n\nclass punt {\n    constructor(x, y) {\n        // Constructor de la classe punt\n        // Rep dos par\u00e0metres amb els quals inicialitza \n        // els atributs x i y\n        this.x = x; \n        this.y = y;\n    }\n\n    get Posicio() {\n        return \"(\" + this.x + \",\" + this.y + \")\";\n    }\n}\n\nclass figura {\n    constructor(color, posici\u00f3) {\n        this.color = color;   // Inicialitzem el color\n        this.position = posici\u00f3; // Inicialitzem la posici\u00f3\n    }\n\n    Dibuixa() {\n        console.log(\"Dibuixant figura en posici\u00f3 \" + this.position.Posicio +\n                      \" i color \" + this.color);\n    }\n}\n\nclass rectangle extends figura {\n    constructor (color, posici\u00f3, costat1, costat2) {\n        // Hereta de figura la posici\u00f3 i el color\n        // Inclou nous atributs: costat1 i costat2\n\n        super(color, posici\u00f3);\n        this.costat1 = costat1;\n        this.costat2 = costat2;\n    }\n\n    Dibuixa() {\n        console.log(\"Dibuixant Rectangle de \" +\n                this.costat1 + \"x\" + this.costat2 +\n                \" en posici\u00f3 \" + this.position.Posicio +\n                \" i color \" + this.color);      \n    }\n\n    area() {\n        return this.costat1 * this.costat2;\n    }\n}\n\nclass cercle extends figura {\n    constructor (color, posici\u00f3, radi) {\n        super(color, posici\u00f3);\n        this.radi = radi;\n    }\n\n    Dibuixa() {\n        console.log(\"Dibuixant Cercle de radi \" + this.radi +\n                    \" en posici\u00f3 \" + this.position.Posicio +\n                    \" i color \" + this.color);\n    }\n\n    area() {\n        return 2 * this.radi * Math.PI;\n    }\n}\n\nlet p1 = new punt(10, 20);\nlet p2 = new punt(10, 30);\nlet p3 = new punt(30, 20);\n\nlet f1 = new figura(\"roig\", p1);\nlet f2 = new rectangle(\"verd\", p2, 40, 20);\nlet f3 = new cercle(\"blau\", p3, 50);\nf1.Dibuixa();\nf2.Dibuixa();\nf3.Dibuixa();\n</code></pre>"},{"location":"Exercicis/","title":"Exercicis","text":""},{"location":"Exercicis/#elements-del-llenguatge","title":"Elements del llenguatge","text":"<ol> <li> <p>Declaraci\u00f3 de variables i operadors    Declara tres variables amb els teus colors preferits i mostra-les per consola. A continuaci\u00f3, utilitza operadors per a combinar-les en una nova variable i mostra\u2019n el resultat.</p> </li> <li> <p>\u00das de <code>typeof</code>    Crea variables de diferents tipus: un n\u00famero, una cadena de text i un valor l\u00f2gic. Utilitza <code>typeof</code> per mostrar el tipus de cada variable en consola.</p> </li> <li> <p>Conversi\u00f3 de tipus autom\u00e0tica    Declara dues variables, una com a n\u00famero i una altra com a cadena de text. Assigna una expressi\u00f3 que involucre les dues variables a una tercera variable i comprova el resultat i el tipus. Explica per qu\u00e8 s\u2019obt\u00e9 aquest resultat.</p> </li> <li> <p>Vectores i acc\u00e9s a elements    Declara un vector amb els dies de la setmana i mostra en consola el segon i el cinqu\u00e8 element. Modifica l'\u00faltim element del vector per indicar \u201cDia desconegut\u201d.</p> </li> <li> <p>JSON b\u00e0sic    Defineix un objecte JSON amb informaci\u00f3 b\u00e0sica sobre un llibre (t\u00edtol, autor i any). Mostra el t\u00edtol del llibre utilitzant l'objecte JSON i despr\u00e9s afegeix una nova propietat <code>editorial</code>.</p> </li> </ol>"},{"location":"Exercicis/#programacio-estructurada","title":"Programaci\u00f3 estructurada","text":"<ol> <li> <p>Condicionals simples amb <code>if/else</code>    Escriu una funci\u00f3 <code>verificaHora(hora)</code> que prenga com a par\u00e0metre un n\u00famero entre 0 i 23. Si la <code>hora</code> est\u00e0 entre 6 i 12, mostra \"Bon dia\"; si \u00e9s entre 13 i 20, \"Bona vesprada\"; i en qualsevol altre cas, \"Bona nit\".</p> </li> <li> <p>Condicional <code>switch</code>    Crea una funci\u00f3 <code>determinaDia(numDia)</code> que mostre el nom del dia en valenci\u00e0 (de \u201cDilluns\u201d a \u201cDiumenge\u201d) a partir d'un n\u00famero de 1 a 7 utilitzant un <code>switch</code>.</p> </li> <li> <p>Bucle <code>for</code>    Escriu un bucle <code>for</code> que mostre els n\u00fameros de l'1 al 10. Despr\u00e9s, escriu un altre <code>for</code> que mostre nom\u00e9s els nombres parells fins al 20.</p> </li> <li> <p>Bucle <code>for...of</code> i vectors    Declara un vector de tres ciutats valencianes i recorre\u2019l amb un <code>for...of</code> per a mostrar cada ciutat en consola.</p> </li> <li> <p><code>while</code> i <code>do...while</code>     Escriu un bucle <code>while</code> que comence en 10 i vaja restant 1 fins a arribar a 0, mostrant cada valor en consola. A continuaci\u00f3, fes el mateix amb un <code>do...while</code>.</p> </li> </ol>"},{"location":"Exercicis/#funcions","title":"Funcions","text":"<ol> <li> <p>Funci\u00f3 que retorna un valor     Crea una funci\u00f3 <code>doble(num)</code> que retorne el doble del n\u00famero proporcionat. Crida-la amb diferents valors i mostra els resultats en consola.</p> </li> <li> <p>Funci\u00f3 amb par\u00e0metres per defecte     Escriu una funci\u00f3 <code>salutaci\u00f3(nom = \"amic\")</code> que mostre \"Hola, [nom]!\". Si no es passa cap nom, ha de mostrar \"Hola, amic!\".</p> </li> </ol>"},{"location":"Exercicis_sol/","title":"Exercicis","text":""},{"location":"Exercicis_sol/#apartat-1-conceptes-basics-del-llenguatge","title":"Apartat 1. Conceptes b\u00e0sics del llenguatge","text":"<ol> <li>Declaraci\u00f3 de variables i operadors    Declara tres variables amb els teus colors preferits i mostra-les per consola. A continuaci\u00f3, utilitza operadors per a combinar-les en una nova variable i mostra\u2019n el resultat.</li> </ol> <p>```js     let color1 = \"blau\";     let color2 = \"verd\";     let color3 = \"roig\";</p> <pre><code>let combinaci\u00f3 = color1 + \" i \" + color2 + \" i \" + color3;\nconsole.log(combinaci\u00f3);\n```\n</code></pre> <ol> <li>\u00das de <code>typeof</code>    Crea variables de diferents tipus: un n\u00famero, una cadena de text i un valor l\u00f2gic. Utilitza <code>typeof</code> per mostrar el tipus de cada variable en consola.</li> </ol> <p>```js     let numero = 5;     let text = \"Hola\";     let valorL\u00f2gic = true;</p> <pre><code>console.log(typeof numero); // \"number\"\nconsole.log(typeof text); // \"string\"\nconsole.log(typeof valorL\u00f2gic); // \"boolean\"\n```\n</code></pre> <ol> <li> <p>Conversi\u00f3 de tipus autom\u00e0tica    Declara dues variables, una com a n\u00famero i una altra com a cadena de text. Assigna una expressi\u00f3 que involucre les dues variables a una tercera variable i comprova el resultat i el tipus. Explica per qu\u00e8 s\u2019obt\u00e9 aquest resultat. Com ho far\u00edem per a que el resultat fora 30?</p> <pre><code>let num = 10;\nlet text = \"20\";\n\nlet resultat = num + text;\nconsole.log(resultat); // \"1020\" (concatena perqu\u00e8 `text` \u00e9s una cadena)\nconsole.log(typeof resultat); // \"string\"\n\n// Per mostrar 30: console.log(num+(+text))\n</code></pre> </li> <li> <p>Vectors i acc\u00e9s a elements    Declara un vector amb els dies de la setmana i mostra en consola el segon i el cinqu\u00e8 element. Modifica l'\u00faltim element del vector per indicar \u201cDia desconegut\u201d.</p> </li> </ol> <pre><code>let dies = [\"Dilluns\", \"Dimarts\", \"Dimecres\", \"Dijous\", \"Divendres\", \"Dissabte\", \"Diumenge\"];\n\nconsole.log(dies[1]); // \"Dimarts\"\nconsole.log(dies[4]); // \"Divendres\"\n\ndies[6] = \"Dia desconegut\";\nconsole.log(dies);\n</code></pre> <ol> <li>JSON b\u00e0sic    Defineix un objecte JSON amb informaci\u00f3 b\u00e0sica sobre un llibre (t\u00edtol, autor i any). Mostra el t\u00edtol del llibre utilitzant l'objecte JSON i despr\u00e9s afegeix una nova propietat <code>editorial</code>.</li> </ol> <pre><code>let llibre = {\n  t\u00edtol: \"El Quixot\",\n  autor: \"Miguel de Cervantes\",\n  any: 1605\n};\n\nconsole.log(llibre.t\u00edtol);\n\nllibre.editorial = \"Editorial Random\";\nconsole.log(llibre);\n</code></pre>"},{"location":"Exercicis_sol/#2-estructures-de-control","title":"2. Estructures de control","text":"<ol> <li>Condicionals simples amb <code>if/else</code>    Escriu una funci\u00f3 <code>verificaHora(hora)</code> que prenga com a par\u00e0metre un n\u00famero entre 0 i 23. Si l'<code>hora</code> est\u00e0 entre 6 i 12, mostra \"Bon dia\"; si \u00e9s entre 13 i 20, \"Bona vesprada\"; i en qualsevol altre cas, \"Bona nit\".</li> </ol> <pre><code>function verificaHora(hora) {\n  if (hora &gt;= 6 &amp;&amp; hora &lt; 13) {\n    console.log(\"Bon dia\");\n  } else if (hora &gt;= 13 &amp;&amp; hora &lt;= 20) {\n    console.log(\"Bona vesprada\");\n  } else {\n    console.log(\"Bona nit\");\n  }\n}\n\nverificaHora(10); // Bon dia\nverificaHora(15); // Bona vesprada\nverificaHora(22); // Bona nit\n</code></pre> <ol> <li>Condicional <code>switch</code>    Crea una funci\u00f3 <code>determinaDia(numDia)</code> que mostre el nom del dia en valenci\u00e0 (de \u201cDilluns\u201d a \u201cDiumenge\u201d) a partir d'un n\u00famero de 1 a 7 utilitzant un <code>switch</code>.</li> </ol> <pre><code>function determinaDia(numDia) {\n  switch (numDia) {\n    case 1:\n      console.log(\"Dilluns\");\n      break;\n    case 2:\n      console.log(\"Dimarts\");\n      break;\n    case 3:\n      console.log(\"Dimecres\");\n      break;\n    case 4:\n      console.log(\"Dijous\");\n      break;\n    case 5:\n      console.log(\"Divendres\");\n      break;\n    case 6:\n      console.log(\"Dissabte\");\n      break;\n    case 7:\n      console.log(\"Diumenge\");\n      break;\n    default:\n      console.log(\"N\u00famero de dia inv\u00e0lid\");\n  }\n}\n\ndeterminaDia(3); // Dimecres\ndeterminaDia(7); // Diumenge\n</code></pre>"},{"location":"Exercicis_sol/#3-estructures-de-bucles","title":"3. Estructures de bucles","text":"<ol> <li>Bucle <code>for</code>    Escriu un bucle <code>for</code> que mostre els n\u00fameros de l'1 al 10. Despr\u00e9s, escriu un altre <code>for</code> que mostre nom\u00e9s els nombres parells fins al 20.</li> </ol> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n  console.log(i);\n}\n\nfor (let i = 2; i &lt;= 20; i += 2) {\n  console.log(i);\n}\n</code></pre> <ol> <li>Bucle <code>for...of</code> i vectors    Declara un vector de tres ciutats valencianes i recorre\u2019l amb un <code>for...of</code> per a mostrar cada ciutat en consola.</li> </ol> <pre><code>let ciutats = [\"Val\u00e8ncia\", \"Alacant\", \"Castell\u00f3\"];\n\nfor (let ciutat of ciutats) {\n  console.log(ciutat);\n}\n</code></pre> <ol> <li><code>while</code> i <code>do...while</code>     Escriu un bucle <code>while</code> que comence en 10 i vaja restant 1 fins a arribar a 0, mostrant cada valor en consola. A continuaci\u00f3, fes el mateix amb un <code>do...while</code>.</li> </ol> <p>Exercici 10 - <code>while</code> i <code>do...while</code></p> <pre><code>let i = 10;\nwhile (i &gt;= 0) {\n  console.log(i);\n  i--;\n}\n\nlet j = 10;\ndo {\n  console.log(j);\n  j--;\n} while (j &gt;= 0);\n</code></pre>"},{"location":"Exercicis_sol/#4-funcions","title":"4. Funcions","text":"<ol> <li>Funci\u00f3 que retorna un valor     Crea una funci\u00f3 <code>doble(num)</code> que retorne el doble del n\u00famero proporcionat. Crida-la amb diferents valors i mostra els resultats en consola.</li> </ol> <pre><code>function doble(num) {\n  return num * 2;\n}\n\nconsole.log(doble(4)); // 8\nconsole.log(doble(10)); // 20\n</code></pre> <ol> <li>Funci\u00f3 amb par\u00e0metres per defecte     Escriu una funci\u00f3 <code>salutaci\u00f3(nom = \"amic\")</code> que mostre \"Hola, [nom]!\". Si no es passa cap nom, ha de mostrar \"Hola, amic!\".</li> </ol> <pre><code>function salutaci\u00f3(nom = \"amic\") {\n  console.log(\"Hola, \" + nom + \"!\");\n}\n\nsalutaci\u00f3(\"Maria\"); // Hola, Maria!\nsalutaci\u00f3(); // Hola, amic!\n</code></pre>"},{"location":"Exercicis_sol/#5-programacio-orientada-a-objectes-amb-prototips","title":"5. Programaci\u00f3 Orientada a Objectes amb prototips","text":"<ol> <li> <p>Creaci\u00f3 de prototips i instanciaci\u00f3     Crea un prototip <code>Persona</code> amb les propietats <code>nom</code> i <code>edat</code>. Afegeix un m\u00e8tode <code>presentaci\u00f3</code> que mostre un missatge amb el nom i l\u2019edat de la persona. Instancia dues persones i crida al m\u00e8tode <code>presentaci\u00f3</code> per a cada una.</p> </li> <li> <p>\u00das de <code>this</code> i <code>prototype</code>     Escriu una funci\u00f3 constructora <code>Cotxe</code> amb les propietats <code>marca</code> i <code>model</code>. Afegeix un m\u00e8tode <code>mostrarCotxe</code> al prototip de <code>Cotxe</code> que mostre un missatge amb la marca i el model del cotxe. Crea dos cotxes i comprova el m\u00e8tode.</p> </li> </ol>"},{"location":"Exercicis_sol/#6-programacio-orientada-a-objectes-amb-classes-es6","title":"6. Programaci\u00f3 Orientada a Objectes amb classes (ES6)","text":"<ol> <li> <p>Definici\u00f3 de classes i constructors     Crea una classe <code>Empleat</code> amb les propietats <code>nom</code> i <code>sou</code>. Afegeix un constructor que inicialitze aquests valors i un m\u00e8tode <code>mostrarInfo</code> que mostre el nom i el sou. Instancia dos empleats i comprova el m\u00e8tode <code>mostrarInfo</code>.</p> </li> <li> <p>\u00das de <code>getters</code> i <code>setters</code>     Defineix una classe <code>Producte</code> amb una propietat <code>_preu</code> i afegeix un getter i un setter per a <code>preu</code>, assegurant que no siga menor que zero. Crea un <code>Producte</code>, assigna-li un valor negatiu i comprova que el preu no canvia.</p> </li> </ol>"},{"location":"Exercicis_sol/#7-herencia-i-polimorfisme","title":"7. Her\u00e8ncia i polimorfisme","text":"<ol> <li> <p>Her\u00e8ncia simple     Defineix una classe <code>Animal</code> amb una propietat <code>nom</code> i un m\u00e8tode <code>ferSoroll</code>. Crea una subclasse <code>Gos</code> que redefinisca <code>ferSoroll</code> per a mostrar \u201cbup\u201d. Instancia un gos i crida al seu m\u00e8tode <code>ferSoroll</code>.</p> </li> <li> <p>Her\u00e8ncia amb <code>super</code>     Crea una classe <code>Dispositiu</code> amb una propietat <code>marca</code> i un m\u00e8tode <code>encendre</code>. A continuaci\u00f3, crea una subclasse <code>Ordinador</code> que afegisca una propietat <code>model</code> i redefineix el m\u00e8tode <code>encendre</code> utilitzant <code>super</code>.</p> </li> <li> <p>Polimorfisme amb funcions de prototip     Defineix un prototip <code>Figura</code> amb un m\u00e8tode <code>area</code> que retorne 0. Crea dos funcions constructores <code>Rectangle</code> i <code>Cercle</code> que hereten de <code>Figura</code> i redefineixen <code>area</code> per a calcular l'\u00e0rea espec\u00edfica de cada forma. </p> </li> </ol>"},{"location":"Exercicis_sol/#bateria-dexercicis-sobre-programacio-orientada-a-objectes-en-javascript","title":"Bateria d\u2019exercicis sobre Programaci\u00f3 Orientada a Objectes en JavaScript","text":""},{"location":"Exercicis_sol/#1-conceptes-basics","title":"1. Conceptes b\u00e0sics","text":"<ol> <li> <p>Definici\u00f3 d\u2019una classe b\u00e0sica    Crea una classe <code>Cotxe</code> amb les propietats <code>marca</code>, <code>model</code> i <code>any</code>. Afegeix un m\u00e8tode <code>descripci\u00f3</code> que retorne una cadena amb tots els detalls del cotxe. Instancia dos objectes de <code>Cotxe</code> amb diferents valors i crida el m\u00e8tode <code>descripci\u00f3</code> per a cada un.</p> </li> <li> <p>Instanciaci\u00f3 d\u2019objectes    Utilitza la classe <code>Persona</code> dels exemples. Crea una nova propietat <code>edat</code> i afegeix un m\u00e8tode <code>presentaci\u00f3</code> que mostre el nom i l\u2019edat de la persona. Instancia dos persones amb noms i edats diferents i comprova que el m\u00e8tode <code>presentaci\u00f3</code> funciona correctament.</p> </li> </ol>"},{"location":"Exercicis_sol/#2-orientacio-a-objectes-basada-en-prototips","title":"2. Orientaci\u00f3 a Objectes basada en prototips","text":"<ol> <li> <p>\u00das del prototip <code>prototype</code>    Crea un constructor <code>Llibre</code> amb propietats <code>t\u00edtol</code>, <code>autor</code> i <code>anyPublicaci\u00f3</code>. Afegeix un m\u00e8tode <code>resum</code> al prototip <code>Llibre.prototype</code> que mostre una cadena amb el t\u00edtol i l\u2019autor del llibre. Crea tres llibres i comprova que el m\u00e8tode <code>resum</code> funcione correctament en cada inst\u00e0ncia.</p> </li> <li> <p>Espais de noms    Defineix un espai de noms <code>aplicaci\u00f3</code> i afegeix dues propietats <code>nomApp</code> i <code>versi\u00f3</code>, juntament amb un m\u00e8tode <code>info</code> que mostre el nom de l\u2019aplicaci\u00f3 i la versi\u00f3. Crida al m\u00e8tode <code>info</code> per a mostrar la informaci\u00f3 de l\u2019aplicaci\u00f3.</p> </li> <li> <p>Objectes prototip per a crear inst\u00e0ncies    Crea una funci\u00f3 constructora <code>Producte</code> amb les propietats <code>nom</code> i <code>preu</code>. Afegeix un m\u00e8tode <code>preuAmbIVA</code> al prototip, que calcule el preu del producte amb un IVA del 21%. Crea diferents inst\u00e0ncies de <code>Producte</code> i comprova el m\u00e8tode <code>preuAmbIVA</code>.</p> </li> </ol>"},{"location":"Exercicis_sol/#3-espais-de-noms-i-encapsulament","title":"3. Espais de Noms i Encapsulament","text":"<ol> <li> <p>Encapsulament de dades amb clousure    Defineix una funci\u00f3 constructora <code>CompteBancari</code> amb una propietat <code>saldo</code>. Afegeix m\u00e8todes per a ingressar diners i per a retirar-ne, assegurant que el saldo mai pot ser menor que zero. Utilitza una variable interna per a guardar el saldo, de manera que aquest no siga accessible des de fora dels m\u00e8todes de la classe.</p> </li> <li> <p>Espais de noms en aplicacions grans    Simula una aplicaci\u00f3 amb tres espais de noms: <code>calculadora</code>, <code>gesti\u00f3Usuaris</code> i <code>producte</code>. Cada espai de noms ha de tenir almenys una propietat i un m\u00e8tode (com per exemple, un c\u00e0lcul simple per a <code>calculadora</code> o una funci\u00f3 per afegir un usuari en <code>gesti\u00f3Usuaris</code>).</p> </li> </ol>"},{"location":"Exercicis_sol/#4-creacio-de-classes-i-us-dherencia-amb-la-sintaxi-es6","title":"4. Creaci\u00f3 de Classes i \u00das d\u2019Her\u00e8ncia amb la sintaxi ES6","text":"<ol> <li> <p>Classes i constructor amb par\u00e0metres per defecte    Defineix una classe <code>Empleat</code> amb propietats <code>nom</code>, <code>c\u00e0rrec</code> i <code>sou</code>. Assegura que el <code>c\u00e0rrec</code> per defecte siga \"Operari\". Crea inst\u00e0ncies amb diferents valors per a comprovar el funcionament del constructor i els valors per defecte.</p> </li> <li> <p>Her\u00e8ncia i \u00fas de <code>super</code>    Crea una classe <code>Vehicle</code> amb una propietat <code>velocitat</code>. Defineix un m\u00e8tode <code>accelerar</code> que augmente la velocitat. A continuaci\u00f3, crea una subclasse <code>Moto</code> que herete de <code>Vehicle</code> i afegeix una propietat <code>marca</code>. Comprova que la subclasse hereta correctament la funcionalitat del m\u00e8tode <code>accelerar</code>.</p> </li> <li> <p>Redefinici\u00f3 de m\u00e8todes a subclasses     Crea una classe <code>Animal</code> amb un m\u00e8tode <code>ferSoroll</code> que mostre \"L'animal fa soroll\". Crea dues subclasses, <code>Gat</code> i <code>Gos</code>, que redefinisquen el m\u00e8tode per a mostrar sons espec\u00edfics (per exemple, \"miau\" i \"bup\").</p> </li> <li> <p>\u00das de m\u00e8todes est\u00e0tics     Defineix una classe <code>Matem\u00e0tiques</code> amb un m\u00e8tode est\u00e0tic <code>sumar</code> que accepte dos n\u00fameros i retorne el resultat. Comprova que pots cridar a <code>Matem\u00e0tiques.sumar</code> sense haver de crear una inst\u00e0ncia de la classe.</p> </li> <li> <p>Encapsulament amb getters i setters     Crea una classe <code>Producte</code> amb una propietat <code>_preu</code>. Afegeix un getter i un setter per a <code>preu</code>, assegurant que el preu mai puga ser negatiu. Crea una inst\u00e0ncia de <code>Producte</code>, intenta assignar-li un valor negatiu i comprova que el preu no es modifica.</p> </li> </ol>"},{"location":"Exercicis_sol/#5-exercicis-avancats-de-polimorfisme-i-prototipus","title":"5. Exercicis avan\u00e7ats de Polimorfisme i Prototipus","text":"<ol> <li> <p>Polimorfisme amb prototips     Crea una funci\u00f3 constructora <code>Forma</code> amb un m\u00e8tode <code>area</code> que retorne 0. Defineix altres funcions constructores <code>Rectangle</code> i <code>Cercle</code> que hereten de <code>Forma</code>. Redefineix el m\u00e8tode <code>area</code> per a calcular l\u2019\u00e0rea espec\u00edfica segons la forma.</p> </li> <li> <p>\u00das de <code>instanceof</code> per comprovar tipus d\u2019inst\u00e0ncies     Crea les classes <code>Persona</code> i <code>Estudiant</code>, on <code>Estudiant</code> hereta de <code>Persona</code>. Defineix un m\u00e8tode en <code>Estudiant</code> que verifique si una inst\u00e0ncia \u00e9s de la classe <code>Estudiant</code> o <code>Persona</code> mitjan\u00e7ant <code>instanceof</code>.</p> </li> <li> <p>Creaci\u00f3 de classes amb atributs privats (soluci\u00f3 alternativa)     Utilitza una funci\u00f3 de tancament (<code>closure</code>) per crear una classe <code>Client</code> que tinga una propietat <code>saldo</code> a la qual nom\u00e9s es puga accedir a trav\u00e9s de m\u00e8todes p\u00fablics. Inclou m\u00e8todes per a ingressar diners i consultar el saldo, per\u00f2 assegura que el saldo no siga directament modificable des de fora.</p> </li> </ol> <p>Aqu\u00ed tens les solucions als exercicis, comen\u00e7ant pels \u00faltims que cobreixen els fonaments de JavaScript i la programaci\u00f3 orientada a objectes:</p>"},{"location":"Exercicis_sol/#solucions-a-la-bateria-dexercicis-de-javascript","title":"Solucions a la Bateria d\u2019Exercicis de JavaScript","text":""},{"location":"Exercicis_sol/#solucions-a-estructures-de-control-funcions-i-prototips","title":"Solucions a Estructures de control, funcions i prototips","text":"<p>Exercici 1 - Declaraci\u00f3 de variables i operadors</p> <p>Exercici 2 - \u00das de <code>typeof</code></p> <p>Exercici 3 - Conversi\u00f3 de tipus autom\u00e0tica</p> <pre><code>let num = 10;\nlet text = \"20\";\n\nlet resultat = num + text;\nconsole.log(resultat); // \"1020\" (concatena perqu\u00e8 `text` \u00e9s una cadena)\nconsole.log(typeof resultat); // \"string\"\n</code></pre> <p>Exercici 4 - Vectors i acc\u00e9s a elements</p> <pre><code>let dies = [\"Dilluns\", \"Dimarts\", \"Dimecres\", \"Dijous\", \"Divendres\", \"Dissabte\", \"Diumenge\"];\n\nconsole.log(dies[1]); // \"Dimarts\"\nconsole.log(dies[4]); // \"Divendres\"\n\ndies[6] = \"Dia desconegut\";\nconsole.log(dies);\n</code></pre> <p>Exercici 5 - JSON b\u00e0sic</p> <pre><code>let llibre = {\n  t\u00edtol: \"El Quixot\",\n  autor: \"Miguel de Cervantes\",\n  any: 1605\n};\n\nconsole.log(llibre.t\u00edtol);\n\nllibre.editorial = \"Editorial Random\";\nconsole.log(llibre);\n</code></pre>"},{"location":"Exercicis_sol/#solucions-a-estructures-de-control","title":"Solucions a Estructures de control","text":"<p>Exercici 6 - Condicionals simples amb <code>if/else</code></p> <pre><code>function verificaHora(hora) {\n  if (hora &gt;= 6 &amp;&amp; hora &lt; 13) {\n    console.log(\"Bon dia\");\n  } else if (hora &gt;= 13 &amp;&amp; hora &lt;= 20) {\n    console.log(\"Bona vesprada\");\n  } else {\n    console.log(\"Bona nit\");\n  }\n}\n\nverificaHora(10); // Bon dia\nverificaHora(15); // Bona vesprada\nverificaHora(22); // Bona nit\n</code></pre> <p>Exercici 7 - Condicional <code>switch</code></p> <pre><code>function determinaDia(numDia) {\n  switch (numDia) {\n    case 1:\n      console.log(\"Dilluns\");\n      break;\n    case 2:\n      console.log(\"Dimarts\");\n      break;\n    case 3:\n      console.log(\"Dimecres\");\n      break;\n    case 4:\n      console.log(\"Dijous\");\n      break;\n    case 5:\n      console.log(\"Divendres\");\n      break;\n    case 6:\n      console.log(\"Dissabte\");\n      break;\n    case 7:\n      console.log(\"Diumenge\");\n      break;\n    default:\n      console.log(\"N\u00famero de dia inv\u00e0lid\");\n  }\n}\n\ndeterminaDia(3); // Dimecres\ndeterminaDia(7); // Diumenge\n</code></pre>"},{"location":"Exercicis_sol/#solucions-a-estructures-de-bucles","title":"Solucions a Estructures de bucles","text":"<p>Exercici 8 - Bucle <code>for</code></p> <pre><code>for (let i = 1; i &lt;= 10; i++) {\n  console.log(i);\n}\n\nfor (let i = 2; i &lt;= 20; i += 2) {\n  console.log(i);\n}\n</code></pre> <p>Exercici 9 - Bucle <code>for...of</code> i vectors</p> <pre><code>let ciutats = [\"Val\u00e8ncia\", \"Alacant\", \"Castell\u00f3\"];\n\nfor (let ciutat of ciutats) {\n  console.log(ciutat);\n}\n</code></pre> <p>Exercici 10 - <code>while</code> i <code>do...while</code></p> <pre><code>let i = 10;\nwhile (i &gt;= 0) {\n  console.log(i);\n  i--;\n}\n\nlet j = 10;\ndo {\n  console.log(j);\n  j--;\n} while (j &gt;= 0);\n</code></pre>"},{"location":"Exercicis_sol/#solucions-a-funcions","title":"Solucions a Funcions","text":"<p>Exercici 11 - Funci\u00f3 que retorna un valor</p> <pre><code>function doble(num) {\n  return num * 2;\n}\n\nconsole.log(doble(4)); // 8\nconsole.log(doble(10)); // 20\n</code></pre> <p>Exercici 12 - Funci\u00f3 amb par\u00e0metres per defecte</p> <pre><code>function salutaci\u00f3(nom = \"amic\") {\n  console.log(\"Hola, \" + nom + \"!\");\n}\n\nsalutaci\u00f3(\"Maria\"); // Hola, Maria!\nsalutaci\u00f3(); // Hola, amic!\n</code></pre>"},{"location":"Exercicis_sol/#solucions-a-programacio-orientada-a-objectes-amb-prototips","title":"Solucions a Programaci\u00f3 Orientada a Objectes amb Prototips","text":"<p>Exercici 13 - Creaci\u00f3 de prototips i instanciaci\u00f3</p> <pre><code>function Persona(nom, edat) {\n  this.nom = nom;\n  this.edat = edat;\n}\n\nPersona.prototype.presentaci\u00f3 = function() {\n  console.log(\"Hola, s\u00f3c \" + this.nom + \" i tinc \" + this.edat + \" anys.\");\n};\n\nlet persona1 = new Persona(\"Joan\", 25);\nlet persona2 = new Persona(\"Anna\", 30);\n\npersona1.presentaci\u00f3();\npersona2.presentaci\u00f3();\n</code></pre> <p>Exercici 14 - \u00das de <code>this</code> i <code>prototype</code></p> <pre><code>function Cotxe(marca, model) {\n  this.marca = marca;\n  this.model = model;\n}\n\nCotxe.prototype.mostrarCotxe = function() {\n  console.log(\"Cotxe: \" + this.marca + \" \" + this.model);\n};\n\nlet cotxe1 = new Cotxe(\"Ford\", \"Focus\");\nlet cotxe2 = new Cotxe(\"Tesla\", \"Model S\");\n\ncotxe1.mostrarCotxe();\ncotxe2.mostrarCotxe();\n</code></pre>"},{"location":"Exercicis_sol/#solucions-a-programacio-orientada-a-objectes-amb-classes-es6","title":"Solucions a Programaci\u00f3 Orientada a Objectes amb classes (ES6)","text":"<p>Exercici 15 - Definici\u00f3 de classes i constructors</p> <pre><code>class Empleat {\n  constructor(nom, sou) {\n    this.nom = nom;\n    this.sou = sou;\n  }\n\n  mostrarInfo() {\n    console.log(\"Empleat: \" + this.nom + \", Sou: \" + this.sou);\n  }\n}\n\nlet empleat1 = new Empleat(\"Laura\", 3000);\nlet empleat2 = new Empleat(\"Marc\", 2500);\n\nempleat1.mostrarInfo();\nempleat2.mostrarInfo();\n</code></pre> <p>Exercici 16 - \u00das de <code>getters</code> i <code>setters</code></p> <pre><code>class Producte {\n  constructor(preu) {\n    this._preu = preu &gt; 0 ? preu : 0;\n  }\n\n  get preu() {\n    return this._preu;\n  }\n\n  set preu(valor) {\n    if (valor &gt; 0) this._preu = valor;\n  }\n}\n\nlet producte = new Producte(20);\nproducte.preu = -10; // no canvia el preu\nconsole.log(producte.preu); // 20\n</code></pre>"},{"location":"Exercicis_sol/#solucions-a-herencia-i-polimorfisme","title":"Solucions a Her\u00e8ncia i Polimorfisme","text":"<p>Exercici 17 - Her\u00e8ncia simple</p> <pre><code>class Animal {\n  constructor(nom) {\n    this.nom = nom;\n  }\n\n  ferSoroll() {\n    console.log(\"L'animal fa soroll\");\n  }\n}\n\nclass Gos extends Animal {\n  ferSoroll() {\n    console.log(\"bup\");\n  }\n}\n\nlet gos = new Gos(\"Toby\");\ngos.ferSoroll(); // \"bup\"\n</code></pre> <p>Exercici 18 - Her\u00e8ncia amb <code>super</code></p> <pre><code>class Dispositiu {\n  constructor(marca) {\n    this.marca = marca;\n  }\n\n  encendre() {\n    console.log(this.marca + \" s'ha enc\u00e8s.\");\n  }\n}\n\nclass Ordinador extends Dispositiu {\n  constructor(marca, model) {\n    super(marca);\n    this.model = model;\n  }\n\n  encendre() {\n    super.encendre();\n    console.log(\"Ordinador \" + this.model + \" est\u00e0 llest per a usar.\");\n  }\n}\n\nlet ordinador = new Ordinador(\"Dell\", \"XPS 13\");\nordinador.encendre();\n</code></pre> <p>Exercici 19 - Polimorfisme amb funcions de prototip</p> <p>```js function Figura() {}</p> <p>Figura.prototype.area = function() {   return 0; };</p> <p>function Rectangle(amplada, al\u00e7ada) {   this.amplada = amplada;   this.al\u00e7ada = al\u00e7ada; }</p> <p>Rectangle.prototype = Object.create(Figura.prototype); Rectangle.prototype.area = function() {   return this.amplada * this.al\u00e7ada; };</p> <p>function Cercle(radi) {   this.radi = radi; }</p> <p>Cercle.prototype = Object.create(Figura.prototype); Cercle.prototype.area = function() {   return Math.PI * this.radi ** 2; };</p> <p>let rectangle = new Rectangle(4, 5); let cercle = new Cercle(</p>"}]}